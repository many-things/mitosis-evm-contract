/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface DenomManagerInterface extends Interface {
  getFunction(
    nameOrSignature: 'ETH' | 'NONE' | 'addAlias' | 'convert' | 'denoms',
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'ETH', values?: undefined): string
  encodeFunctionData(functionFragment: 'NONE', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'addAlias',
    values: [AddressLike, AddressLike],
  ): string
  encodeFunctionData(functionFragment: 'convert', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'denoms', values: [AddressLike]): string

  decodeFunctionResult(functionFragment: 'ETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'NONE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addAlias', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'convert', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'denoms', data: BytesLike): Result
}

export interface DenomManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract
  attach(addressOrName: AddressLike): this
  deployed(): Promise<this>

  interface: DenomManagerInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>

  ETH: TypedContractMethod<[], [string], 'view'>

  NONE: TypedContractMethod<[], [string], 'view'>

  addAlias: TypedContractMethod<
    [_token: AddressLike, _alias: AddressLike],
    [void],
    'nonpayable'
  >

  convert: TypedContractMethod<[_token: AddressLike], [string], 'view'>

  denoms: TypedContractMethod<[arg0: AddressLike], [string], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T

  getFunction(nameOrSignature: 'ETH'): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'NONE',
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'addAlias',
  ): TypedContractMethod<
    [_token: AddressLike, _alias: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'convert',
  ): TypedContractMethod<[_token: AddressLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'denoms',
  ): TypedContractMethod<[arg0: AddressLike], [string], 'view'>

  filters: {}
}
