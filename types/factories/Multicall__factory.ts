/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Multicall, MulticallInterface } from "../Multicall";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct IMulticall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052600080546001600160a01b031916905534801561002057600080fd5b50610d67806100306000396000f3fe6080604052600436106100f75760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e14610274578063bce38bd71461028f578063c3077fa9146102a2578063ee82ac5e146102b557600080fd5b80634d2301cc1461021357806372425d9d1461023b57806382ad56cb1461024e57806386d516e81461026157600080fd5b80633408e470116100c65780633408e470146101b8578063399542e9146101cb5780633e64a696146101ed57806342cbb15c1461020057600080fd5b80630f28c97d1461013d578063174dea711461015f578063252dba421461017f57806327e86d6e146101a057600080fd5b3661013857600080546040516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015610136573d6000803e3d6000fd5b005b600080fd5b34801561014957600080fd5b50425b6040519081526020015b60405180910390f35b61017261016d366004610a24565b6102d4565b6040516101569190610b1a565b61019261018d366004610a24565b610309565b604051610156929190610b34565b3480156101ac57600080fd5b5043600019014061014c565b3480156101c457600080fd5b504661014c565b6101de6101d9366004610b9e565b610482565b60405161015693929190610bf8565b3480156101f957600080fd5b504861014c565b34801561020c57600080fd5b504361014c565b34801561021f57600080fd5b5061014c61022e366004610c20565b6001600160a01b03163190565b34801561024757600080fd5b504461014c565b61017261025c366004610a24565b61049d565b34801561026d57600080fd5b504561014c565b34801561028057600080fd5b50604051418152602001610156565b61017261029d366004610b9e565b6104bb565b6101de6102b0366004610a24565b61064e565b3480156102c157600080fd5b5061014c6102d0366004610c49565b4090565b600080546001600160a01b0319163317905560606102f2838361066d565b600080546001600160a01b03191690559392505050565b436060828067ffffffffffffffff81111561032657610326610c62565b60405190808252806020026020018201604052801561035957816020015b60608152602001906001900390816103445790505b5091503660005b8281101561047857600087878381811061037c5761037c610c78565b905060200281019061038e9190610c8e565b925061039d6020840184610c20565b6001600160a01b03166103b36020850185610cae565b6040516103c1929190610cf5565b6000604051808303816000865af19150503d80600081146103fe576040519150601f19603f3d011682016040523d82523d6000602084013e610403565b606091505b5086848151811061041657610416610c78565b602090810291909101015290508061046f5760405162461bcd60e51b8152602060048201526017602482015276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60448201526064015b60405180910390fd5b50600101610360565b5050509250929050565b43804060606104928686866104bb565b905093509350939050565b600080546001600160a01b0319163317905560606102f28383610856565b6060818067ffffffffffffffff8111156104d7576104d7610c62565b60405190808252806020026020018201604052801561051d57816020015b6040805180820190915260008152606060208201528152602001906001900390816104f55790505b5091503660005b8281101561064457600084828151811061054057610540610c78565b6020026020010151905086868381811061055c5761055c610c78565b905060200281019061056e9190610c8e565b925061057d6020840184610c20565b6001600160a01b03166105936020850185610cae565b6040516105a1929190610cf5565b6000604051808303816000865af19150503d80600081146105de576040519150601f19603f3d011682016040523d82523d6000602084013e6105e3565b606091505b50602083015215158152871561063b57805161063b5760405162461bcd60e51b8152602060048201526017602482015276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b6044820152606401610466565b50600101610524565b5050509392505050565b600080606061065f60018686610482565b919790965090945092505050565b60606000828067ffffffffffffffff81111561068b5761068b610c62565b6040519080825280602002602001820160405280156106d157816020015b6040805180820190915260008152606060208201528152602001906001900390816106a95790505b5092503660005b828110156107fd5760008582815181106106f4576106f4610c78565b6020026020010151905087878381811061071057610710610c78565b90506020028101906107229190610d05565b60408101359586019590935061073b6020850185610c20565b6001600160a01b0316816107526060870187610cae565b604051610760929190610cf5565b60006040518083038185875af1925050503d806000811461079d576040519150601f19603f3d011682016040523d82523d6000602084013e6107a2565b606091505b5060208085019190915290151580845290850135176107f35762461bcd60e51b6000526020600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260846000fd5b50506001016106d8565b5082341461084d5760405162461bcd60e51b815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d617463680000000000006044820152606401610466565b50505092915050565b6060818067ffffffffffffffff81111561087257610872610c62565b6040519080825280602002602001820160405280156108b857816020015b6040805180820190915260008152606060208201528152602001906001900390816108905790505b5091503660005b8281101561084d5760008482815181106108db576108db610c78565b602002602001015190508686838181106108f7576108f7610c78565b90506020028101906109099190610d1b565b92506109186020840184610c20565b6001600160a01b031661092e6040850185610cae565b60405161093c929190610cf5565b6000604051808303816000865af19150503d8060008114610979576040519150601f19603f3d011682016040523d82523d6000602084013e61097e565b606091505b5060208084019190915290151580835290840135176109cf5762461bcd60e51b6000526020600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260646000fd5b506001016108bf565b60008083601f8401126109ea57600080fd5b50813567ffffffffffffffff811115610a0257600080fd5b6020830191508360208260051b8501011115610a1d57600080fd5b9250929050565b60008060208385031215610a3757600080fd5b823567ffffffffffffffff811115610a4e57600080fd5b610a5a858286016109d8565b90969095509350505050565b6000815180845260005b81811015610a8c57602081850181015186830182015201610a70565b506000602082860101526020601f19601f83011685010191505092915050565b600082825180855260208086019550808260051b84010181860160005b84811015610b0d57858303601f1901895281518051151584528401516040858501819052610af981860183610a66565b9a86019a9450505090830190600101610ac9565b5090979650505050505050565b602081526000610b2d6020830184610aac565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610b9057605f19888703018452610b7e868351610a66565b95509284019290840190600101610b62565b509398975050505050505050565b600080600060408486031215610bb357600080fd5b83358015158114610bc357600080fd5b9250602084013567ffffffffffffffff811115610bdf57600080fd5b610beb868287016109d8565b9497909650939450505050565b838152826020820152606060408201526000610c176060830184610aac565b95945050505050565b600060208284031215610c3257600080fd5b81356001600160a01b0381168114610b2d57600080fd5b600060208284031215610c5b57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235603e19833603018112610ca457600080fd5b9190910192915050565b6000808335601e19843603018112610cc557600080fd5b83018035915067ffffffffffffffff821115610ce057600080fd5b602001915036819003821315610a1d57600080fd5b8183823760009101908152919050565b60008235607e19833603018112610ca457600080fd5b60008235605e19833603018112610ca457600080fdfea2646970667358221220f2bf2a145f3b8b4167d078055801ce8718c8e157e3ba9409f9d1f57a4e89b7ef64736f6c63430008110033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  override connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
