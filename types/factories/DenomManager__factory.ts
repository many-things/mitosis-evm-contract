/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { DenomManager, DenomManagerInterface } from "../DenomManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NONE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_alias",
        type: "address",
      },
    ],
    name: "addAlias",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "convert",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "denoms",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600060208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546001600160a01b031990811690915560018083527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d80549092161790556101c290819061008890396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80638313405f1461005c5780638322fff2146100a157806383525394146100a9578063def2489b146100b1578063f914efab146100dd575b600080fd5b61008561006a366004610137565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610085600181565b610085600081565b6100856100bf366004610137565b6001600160a01b039081166000908152602081905260409020541690565b6101196100eb366004610159565b6001600160a01b03918216600090815260208190526040902080546001600160a01b03191691909216179055565b005b80356001600160a01b038116811461013257600080fd5b919050565b60006020828403121561014957600080fd5b6101528261011b565b9392505050565b6000806040838503121561016c57600080fd5b6101758361011b565b91506101836020840161011b565b9050925092905056fea264697066735822122054e090bc92932ca7039d496cb003f5c143492151a9516e5ffb4330b7d3e21d1664736f6c63430008110033";

type DenomManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DenomManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DenomManager__factory extends ContractFactory {
  constructor(...args: DenomManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DenomManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DenomManager__factory {
    return super.connect(runner) as DenomManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DenomManagerInterface {
    return new Interface(_abi) as DenomManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DenomManager {
    return new Contract(address, _abi, runner) as unknown as DenomManager;
  }
}
